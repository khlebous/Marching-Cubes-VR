
#pragma kernel CSMain

struct Vert
{
	float4 position;
	float3 normal;
	float4 color;
};

SamplerState _LinearClamp;

float _Target;

float3 _Scale;

float4 _BrushColor;

int _Width, _Height, _Depth, _Border;

StructuredBuffer<int> _TriangleConnectionTable;

StructuredBuffer<int> _CubeEdgeFlags;

StructuredBuffer<float> _Voxels;

StructuredBuffer<float4> _VoxelColors;

//Texture3D<float3> _Normals;

RWStructuredBuffer<Vert> _Buffer;

// edgeConnection lists the index of the endpoint vertices for each of the 12 edges of the cube
static int2 edgeConnection[12] =
{
	int2(0,1), int2(1,2), int2(2,3), int2(3,0), int2(4,5), int2(5,6), int2(6,7), int2(7,4), int2(0,4), int2(1,5), int2(2,6), int2(3,7)
};

// edgeDirection lists the direction vector (vertex1-vertex0) for each edge in the cube
static float3 edgeDirection[12] =
{
	float3(1.0f, 0.0f, 0.0f),float3(0.0f, 1.0f, 0.0f),float3(-1.0f, 0.0f, 0.0f),float3(0.0f, -1.0f, 0.0f),
	float3(1.0f, 0.0f, 0.0f),float3(0.0f, 1.0f, 0.0f),float3(-1.0f, 0.0f, 0.0f),float3(0.0f, -1.0f, 0.0f),
	float3(0.0f, 0.0f, 1.0f),float3(0.0f, 0.0f, 1.0f),float3(0.0f, 0.0f, 1.0f),float3(0.0f,  0.0f, 1.0f)
};

// vertexOffset lists the positions, relative to vertex0, of each of the 8 vertices of a cube
static int3 vertexOffset[8] =
{
	int3(0, 0, 0),int3(1, 0, 0),int3(1, 1, 0),int3(0, 1, 0),
	int3(0, 0, 1),int3(1, 0, 1),int3(1, 1, 1),int3(0, 1, 1)
};

void FillCube(int x, int y, int z, out float cube[8])
{
	cube[0] = _Voxels[x + y * _Width + z * _Width * _Height];
	cube[1] = _Voxels[(x + 1) + y * _Width + z * _Width * _Height];
	cube[2] = _Voxels[(x + 1) + (y + 1) * _Width + z * _Width * _Height];
	cube[3] = _Voxels[x + (y + 1) * _Width + z * _Width * _Height];

	cube[4] = _Voxels[x + y * _Width + (z + 1) * _Width * _Height];
	cube[5] = _Voxels[(x + 1) + y * _Width + (z + 1) * _Width * _Height];
	cube[6] = _Voxels[(x + 1) + (y + 1) * _Width + (z + 1) * _Width * _Height];
	cube[7] = _Voxels[x + (y + 1) * _Width + (z + 1) * _Width * _Height];
}

void FillCubeColors(int x, int y, int z, out float4 cubeColor[8])
{
	cubeColor[0] = _VoxelColors[x + y * _Width + z * _Width * _Height];
	cubeColor[1] = _VoxelColors[(x + 1) + y * _Width + z * _Width * _Height];
	cubeColor[2] = _VoxelColors[(x + 1) + (y + 1) * _Width + z * _Width * _Height];
	cubeColor[3] = _VoxelColors[x + (y + 1) * _Width + z * _Width * _Height];

	cubeColor[4] = _VoxelColors[x + y * _Width + (z + 1) * _Width * _Height];
	cubeColor[5] = _VoxelColors[(x + 1) + y * _Width + (z + 1) * _Width * _Height];
	cubeColor[6] = _VoxelColors[(x + 1) + (y + 1) * _Width + (z + 1) * _Width * _Height];
	cubeColor[7] = _VoxelColors[x + (y + 1) * _Width + (z + 1) * _Width * _Height];
}

// GetOffset finds the approximate point of intersection of the surface
// between two points with the values v1 and v2
float GetOffset(float v1, float v2)
{
	float delta = v2 - v1;
	return (delta == 0.0f) ? 0.5f : (_Target - v1) / delta;
}

Vert CreateVertex(float3 position, float4 color, float3 centre, float3 size)
{
	Vert vert;

	vert.color = color;

	float3 locPos = position - centre;
	vert.position = float4(locPos.x * _Scale.x, locPos.y * _Scale.y, locPos.z * _Scale.z, 1.0);

	vert.normal = float3(0,0,0);//must be set

	return vert;
}

[numthreads(8, 8, 8)]
void CSMain(int3 id : SV_DispatchThreadID)
{
	if (id.x >= _Width - 1 - _Border) return;
	if (id.y >= _Height - 1 - _Border) return;
	if (id.z >= _Depth - 1 - _Border) return;

	float3 pos = float3(id);
	float3 centre = float3(_Width-1, 0, _Depth-1) / 2.0; // N-1 is triangle number

	float cube[8];
	float4 cubeColor[8];
	FillCube(id.x, id.y, id.z, cube);
	FillCubeColors(id.x, id.y, id.z, cubeColor);

	int i = 0;
	int flagIndex = 0;
	float3 edgeVertex[12];
	float4 edgeVertexColor[12];

	//Find which vertices are inside of the surface and which are outside
	for (i = 0; i < 8; i++)
		if (cube[i] <= _Target) flagIndex |= 1 << i;

	//Find which edges are intersected by the surface
	int edgeFlags = _CubeEdgeFlags[flagIndex];

	// no connections, return
	if (edgeFlags == 0) return;

	//Find the point of intersection of the surface with each edge
	for (i = 0; i < 12; i++)
	{
		//if there is an intersection on this edge
		if ((edgeFlags & (1 << i)) != 0)
		{
			float offset = GetOffset(cube[edgeConnection[i].x], cube[edgeConnection[i].y]);

			edgeVertex[i] = pos + (vertexOffset[edgeConnection[i].x] + offset * edgeDirection[i]);
			edgeVertexColor[i] = (cubeColor[edgeConnection[i].x] + cubeColor[edgeConnection[i].y]) / 2;
		}
	}

	float3 size = float3(_Width - 1, _Height - 1, _Depth - 1);

	int idx = id.x + id.y * _Width + id.z * _Width * _Height;

	//Save the triangles that were found. There can be up to five per cube
	for (i = 0; i < 5; i++)
	{
		//If the connection table is not -1 then this a triangle.
		if (_TriangleConnectionTable[flagIndex * 16 + 3 * i] >= 0)
		{
			float3 position;

			int idx1 = _TriangleConnectionTable[flagIndex * 16 + (3 * i + 0)];
			_Buffer[idx * 15 + (3 * i + 0)] = CreateVertex(edgeVertex[idx1], edgeVertexColor[idx1], centre, size);

			int idx2 = _TriangleConnectionTable[flagIndex * 16 + (3 * i + 1)];
			_Buffer[idx * 15 + (3 * i + 1)] = CreateVertex(edgeVertex[idx2], edgeVertexColor[idx2], centre, size);

			int idx3 = _TriangleConnectionTable[flagIndex * 16 + (3 * i + 2)];
			_Buffer[idx * 15 + (3 * i + 2)] = CreateVertex(edgeVertex[idx3], edgeVertexColor[idx3], centre, size);

		}
	}
}


















