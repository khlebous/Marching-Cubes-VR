#pragma kernel CSMain

int _BrushMode;
float _BrushRange;
float3 _BrushPosition;
float4 _BrushColor;

RWStructuredBuffer<float> _Voxels;
RWStructuredBuffer<float4> _VoxelColors;

float3 _Scale;
uint _Width, _Height, _Depth;


void Draw(int idx, float distanceToBrush) {
	if (_BrushMode == 2)
		_Voxels[idx] = min(_Voxels[idx], distanceToBrush);

	if (_BrushMode == 1)
		_Voxels[idx] = max(_Voxels[idx], 1 - distanceToBrush);
}

void ChangeColor(uint3 id)
{
	int idx = id.x + id.y * _Width + id.z * _Width * _Height;
	float3 position = float3(id.x * _Scale.x, id.y * _Scale.y, id.z * _Scale.z);
	float dist = distance(position, _BrushPosition) - _BrushRange;

	if (dist <= 0)
		_VoxelColors[idx] = _BrushColor;
}

void ChangeShape(uint3 id)
{
	if (id.x == 0 || id.y == 0 || id.z == 0 || id.x == _Width - 1 || id.y == _Height - 1 || id.z == _Depth - 1)
		return;

	int idx = id.x + id.y * _Width + id.z * _Width * _Height;
	float3 position = float3(id.x * _Scale.x, id.y * _Scale.y, id.z * _Scale.z);
	float dist = distance(position, _BrushPosition) - _BrushRange;

	if (dist <= 1) // 1 is cube size
		Draw(idx, dist);
}

[numthreads(8, 8, 8)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	if (_BrushMode == 0)
		return;


	if (_BrushMode == 3)
		ChangeColor(id);
	else
		ChangeShape(id);
}

